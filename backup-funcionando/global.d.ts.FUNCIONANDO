export { };

declare module '*.glb' {
  const src: string;
  export default src;
}

declare module '*.png' {
  const src: string;
  export default src;
}

declare module 'meshline' {
  import * as THREE from 'three';
  
  export class MeshLineGeometry extends THREE.BufferGeometry {
    constructor();
    setPoints(points: THREE.Vector3[]): void;
  }
  
  export class MeshLineMaterial extends THREE.ShaderMaterial {
    constructor(options?: {
      color?: string | THREE.Color;
      resolution?: [number, number];
      lineWidth?: number;
      useMap?: boolean;
      map?: THREE.Texture;
      repeat?: [number, number];
      depthTest?: boolean;
    });
  }
}

// Fix for Three.js texture wrapS and wrapT properties
declare module 'three' {
  interface Texture {
    wrapS: number;
    wrapT: number;
  }
}

// JSX IntrinsicElements y tipos React
declare global {
  namespace JSX {
    interface IntrinsicElements {
      [elemName: string]: any;
    }
  }
}

// Declaraci√≥n completa de React
declare module 'react' {
  export = React;
  export as namespace React;
  namespace React {
    function useState<S>(initialState: S | (() => S)): [S, React.Dispatch<React.SetStateAction<S>>];
    function useEffect(effect: React.EffectCallback, deps?: React.DependencyList): void;
    function useRef<T>(initialValue: T): React.MutableRefObject<T>;
    function useRef<T>(initialValue: T | null): React.RefObject<T>;
    function useRef<T = undefined>(): React.MutableRefObject<T | undefined>;
    
    interface EffectCallback {
      (): void | (() => void | undefined);
    }
    type DependencyList = ReadonlyArray<any>;
    interface MutableRefObject<T> {
      current: T;
    }
    interface RefObject<T> {
      readonly current: T | null;
    }
    type Dispatch<A> = (value: A) => void;
    type SetStateAction<S> = S | ((prevState: S) => S);
  }
}